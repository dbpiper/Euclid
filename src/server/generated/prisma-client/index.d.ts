// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  stock: (where?: StockWhereInput) => Promise<boolean>;
  stockList: (where?: StockListWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  stock: (where: StockWhereUniqueInput) => StockPromise;
  stocks: (
    args?: {
      where?: StockWhereInput;
      orderBy?: StockOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Stock>;
  stocksConnection: (
    args?: {
      where?: StockWhereInput;
      orderBy?: StockOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StockConnectionPromise;
  stockList: (where: StockListWhereUniqueInput) => StockListPromise;
  stockLists: (
    args?: {
      where?: StockListWhereInput;
      orderBy?: StockListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<StockList>;
  stockListsConnection: (
    args?: {
      where?: StockListWhereInput;
      orderBy?: StockListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StockListConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createStock: (data: StockCreateInput) => StockPromise;
  updateStock: (
    args: { data: StockUpdateInput; where: StockWhereUniqueInput }
  ) => StockPromise;
  updateManyStocks: (
    args: { data: StockUpdateManyMutationInput; where?: StockWhereInput }
  ) => BatchPayloadPromise;
  upsertStock: (
    args: {
      where: StockWhereUniqueInput;
      create: StockCreateInput;
      update: StockUpdateInput;
    }
  ) => StockPromise;
  deleteStock: (where: StockWhereUniqueInput) => StockPromise;
  deleteManyStocks: (where?: StockWhereInput) => BatchPayloadPromise;
  createStockList: (data: StockListCreateInput) => StockListPromise;
  updateStockList: (
    args: { data: StockListUpdateInput; where: StockListWhereUniqueInput }
  ) => StockListPromise;
  updateManyStockLists: (
    args: {
      data: StockListUpdateManyMutationInput;
      where?: StockListWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertStockList: (
    args: {
      where: StockListWhereUniqueInput;
      create: StockListCreateInput;
      update: StockListUpdateInput;
    }
  ) => StockListPromise;
  deleteStockList: (where: StockListWhereUniqueInput) => StockListPromise;
  deleteManyStockLists: (where?: StockListWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  stock: (
    where?: StockSubscriptionWhereInput
  ) => StockSubscriptionPayloadSubscription;
  stockList: (
    where?: StockListSubscriptionWhereInput
  ) => StockListSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type StockOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StockListOrderByInput =
  | "ticker_ASC"
  | "ticker_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type StockWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StockWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  date?: Int;
  date_not?: Int;
  date_in?: Int[] | Int;
  date_not_in?: Int[] | Int;
  date_lt?: Int;
  date_lte?: Int;
  date_gt?: Int;
  date_gte?: Int;
  AND?: StockWhereInput[] | StockWhereInput;
  OR?: StockWhereInput[] | StockWhereInput;
  NOT?: StockWhereInput[] | StockWhereInput;
}

export type StockListWhereUniqueInput = AtLeastOne<{
  ticker: String;
}>;

export interface StockListWhereInput {
  ticker?: String;
  ticker_not?: String;
  ticker_in?: String[] | String;
  ticker_not_in?: String[] | String;
  ticker_lt?: String;
  ticker_lte?: String;
  ticker_gt?: String;
  ticker_gte?: String;
  ticker_contains?: String;
  ticker_not_contains?: String;
  ticker_starts_with?: String;
  ticker_not_starts_with?: String;
  ticker_ends_with?: String;
  ticker_not_ends_with?: String;
  stocks_every?: StockWhereInput;
  stocks_some?: StockWhereInput;
  stocks_none?: StockWhereInput;
  AND?: StockListWhereInput[] | StockListWhereInput;
  OR?: StockListWhereInput[] | StockListWhereInput;
  NOT?: StockListWhereInput[] | StockListWhereInput;
}

export interface StockCreateInput {
  price: Float;
  date: Int;
}

export interface StockUpdateInput {
  price?: Float;
  date?: Int;
}

export interface StockUpdateManyMutationInput {
  price?: Float;
  date?: Int;
}

export interface StockListCreateInput {
  ticker: String;
  stocks?: StockCreateManyInput;
}

export interface StockCreateManyInput {
  create?: StockCreateInput[] | StockCreateInput;
  connect?: StockWhereUniqueInput[] | StockWhereUniqueInput;
}

export interface StockListUpdateInput {
  ticker?: String;
  stocks?: StockUpdateManyInput;
}

export interface StockUpdateManyInput {
  create?: StockCreateInput[] | StockCreateInput;
  update?:
    | StockUpdateWithWhereUniqueNestedInput[]
    | StockUpdateWithWhereUniqueNestedInput;
  upsert?:
    | StockUpsertWithWhereUniqueNestedInput[]
    | StockUpsertWithWhereUniqueNestedInput;
  delete?: StockWhereUniqueInput[] | StockWhereUniqueInput;
  connect?: StockWhereUniqueInput[] | StockWhereUniqueInput;
  disconnect?: StockWhereUniqueInput[] | StockWhereUniqueInput;
  deleteMany?: StockScalarWhereInput[] | StockScalarWhereInput;
  updateMany?:
    | StockUpdateManyWithWhereNestedInput[]
    | StockUpdateManyWithWhereNestedInput;
}

export interface StockUpdateWithWhereUniqueNestedInput {
  where: StockWhereUniqueInput;
  data: StockUpdateDataInput;
}

export interface StockUpdateDataInput {
  price?: Float;
  date?: Int;
}

export interface StockUpsertWithWhereUniqueNestedInput {
  where: StockWhereUniqueInput;
  update: StockUpdateDataInput;
  create: StockCreateInput;
}

export interface StockScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  price?: Float;
  price_not?: Float;
  price_in?: Float[] | Float;
  price_not_in?: Float[] | Float;
  price_lt?: Float;
  price_lte?: Float;
  price_gt?: Float;
  price_gte?: Float;
  date?: Int;
  date_not?: Int;
  date_in?: Int[] | Int;
  date_not_in?: Int[] | Int;
  date_lt?: Int;
  date_lte?: Int;
  date_gt?: Int;
  date_gte?: Int;
  AND?: StockScalarWhereInput[] | StockScalarWhereInput;
  OR?: StockScalarWhereInput[] | StockScalarWhereInput;
  NOT?: StockScalarWhereInput[] | StockScalarWhereInput;
}

export interface StockUpdateManyWithWhereNestedInput {
  where: StockScalarWhereInput;
  data: StockUpdateManyDataInput;
}

export interface StockUpdateManyDataInput {
  price?: Float;
  date?: Int;
}

export interface StockListUpdateManyMutationInput {
  ticker?: String;
}

export interface StockSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StockWhereInput;
  AND?: StockSubscriptionWhereInput[] | StockSubscriptionWhereInput;
  OR?: StockSubscriptionWhereInput[] | StockSubscriptionWhereInput;
  NOT?: StockSubscriptionWhereInput[] | StockSubscriptionWhereInput;
}

export interface StockListSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StockListWhereInput;
  AND?: StockListSubscriptionWhereInput[] | StockListSubscriptionWhereInput;
  OR?: StockListSubscriptionWhereInput[] | StockListSubscriptionWhereInput;
  NOT?: StockListSubscriptionWhereInput[] | StockListSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Stock {
  id: ID_Output;
  price: Float;
  date: Int;
}

export interface StockPromise extends Promise<Stock>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  date: () => Promise<Int>;
}

export interface StockSubscription
  extends Promise<AsyncIterator<Stock>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<Int>>;
}

export interface StockConnection {
  pageInfo: PageInfo;
  edges: StockEdge[];
}

export interface StockConnectionPromise
  extends Promise<StockConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StockEdge>>() => T;
  aggregate: <T = AggregateStockPromise>() => T;
}

export interface StockConnectionSubscription
  extends Promise<AsyncIterator<StockConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StockEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStockSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StockEdge {
  node: Stock;
  cursor: String;
}

export interface StockEdgePromise extends Promise<StockEdge>, Fragmentable {
  node: <T = StockPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StockEdgeSubscription
  extends Promise<AsyncIterator<StockEdge>>,
    Fragmentable {
  node: <T = StockSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStock {
  count: Int;
}

export interface AggregateStockPromise
  extends Promise<AggregateStock>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStockSubscription
  extends Promise<AsyncIterator<AggregateStock>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StockList {
  ticker: String;
}

export interface StockListPromise extends Promise<StockList>, Fragmentable {
  ticker: () => Promise<String>;
  stocks: <T = FragmentableArray<Stock>>(
    args?: {
      where?: StockWhereInput;
      orderBy?: StockOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StockListSubscription
  extends Promise<AsyncIterator<StockList>>,
    Fragmentable {
  ticker: () => Promise<AsyncIterator<String>>;
  stocks: <T = Promise<AsyncIterator<StockSubscription>>>(
    args?: {
      where?: StockWhereInput;
      orderBy?: StockOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface StockListConnection {
  pageInfo: PageInfo;
  edges: StockListEdge[];
}

export interface StockListConnectionPromise
  extends Promise<StockListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StockListEdge>>() => T;
  aggregate: <T = AggregateStockListPromise>() => T;
}

export interface StockListConnectionSubscription
  extends Promise<AsyncIterator<StockListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StockListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStockListSubscription>() => T;
}

export interface StockListEdge {
  node: StockList;
  cursor: String;
}

export interface StockListEdgePromise
  extends Promise<StockListEdge>,
    Fragmentable {
  node: <T = StockListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StockListEdgeSubscription
  extends Promise<AsyncIterator<StockListEdge>>,
    Fragmentable {
  node: <T = StockListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStockList {
  count: Int;
}

export interface AggregateStockListPromise
  extends Promise<AggregateStockList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStockListSubscription
  extends Promise<AsyncIterator<AggregateStockList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StockSubscriptionPayload {
  mutation: MutationType;
  node: Stock;
  updatedFields: String[];
  previousValues: StockPreviousValues;
}

export interface StockSubscriptionPayloadPromise
  extends Promise<StockSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StockPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StockPreviousValuesPromise>() => T;
}

export interface StockSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StockSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StockSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StockPreviousValuesSubscription>() => T;
}

export interface StockPreviousValues {
  id: ID_Output;
  price: Float;
  date: Int;
}

export interface StockPreviousValuesPromise
  extends Promise<StockPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  date: () => Promise<Int>;
}

export interface StockPreviousValuesSubscription
  extends Promise<AsyncIterator<StockPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<Int>>;
}

export interface StockListSubscriptionPayload {
  mutation: MutationType;
  node: StockList;
  updatedFields: String[];
  previousValues: StockListPreviousValues;
}

export interface StockListSubscriptionPayloadPromise
  extends Promise<StockListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StockListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StockListPreviousValuesPromise>() => T;
}

export interface StockListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StockListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StockListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StockListPreviousValuesSubscription>() => T;
}

export interface StockListPreviousValues {
  ticker: String;
}

export interface StockListPreviousValuesPromise
  extends Promise<StockListPreviousValues>,
    Fragmentable {
  ticker: () => Promise<String>;
}

export interface StockListPreviousValuesSubscription
  extends Promise<AsyncIterator<StockListPreviousValues>>,
    Fragmentable {
  ticker: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Stock",
    embedded: false
  },
  {
    name: "StockList",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
